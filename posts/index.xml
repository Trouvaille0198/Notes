<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - 伤心肠粉的酱油碟子</title><link>https://trouvaille0198.github.io/Notes/posts/</link><description>所有文章 | 伤心肠粉的酱油碟子</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 11 Mar 2022 10:42:42 +0800</lastBuildDate><atom:link href="https://trouvaille0198.github.io/Notes/posts/" rel="self" type="application/rss+xml"/><item><title>Go 基础语法</title><link>https://trouvaille0198.github.io/Notes/posts/golang/basicgrammar/</link><pubDate>Fri, 11 Mar 2022 10:42:42 +0800</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/basicgrammar/</guid><description>Golang Go is an open source programming language supported by Google Easy to learn and get started with Built-in concurrency and a robust standard library Growing ecosystem of partners, communities, and tools 安装 下载地址：https://go.dev/dl/ 使用 Linux 1 2 3 4 5 6 $ wget https://studygolang.com/dl/golang/go1.13.6.linux-amd64.tar.gz $</description></item><item><title>10. 正则表达式匹配</title><link>https://trouvaille0198.github.io/Notes/posts/%E5%88%B7%E9%A2%98/dp/10.-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/</link><pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/%E5%88%B7%E9%A2%98/dp/10.-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/</guid><description>10. 正则表达式匹配 hard 给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。 '.' 匹配任意单个字符 '*' 匹配零个或多个前面的那一个</description></item><item><title>202. 快乐数</title><link>https://trouvaille0198.github.io/Notes/posts/%E5%88%B7%E9%A2%98/others/202.-%E5%BF%AB%E4%B9%90%E6%95%B0/</link><pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/%E5%88%B7%E9%A2%98/others/202.-%E5%BF%AB%E4%B9%90%E6%95%B0/</guid><description>202. 快乐数 easy 编写一个算法来判断一个数 n 是不是快乐数。 「快乐数」 定义为： 对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。 然后重复这</description></item><item><title>242. 有效的字母异位词</title><link>https://trouvaille0198.github.io/Notes/posts/%E5%88%B7%E9%A2%98/string/242.-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/</link><pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/%E5%88%B7%E9%A2%98/string/242.-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/</guid><description>242. 有效的字母异位词 给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。 **注意：**若 s 和 *t* 中每个字符出现的次数都相同，则称 s 和</description></item><item><title>349. 两个数组的交集</title><link>https://trouvaille0198.github.io/Notes/posts/%E5%88%B7%E9%A2%98/array/349.-%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86/</link><pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/%E5%88%B7%E9%A2%98/array/349.-%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86/</guid><description>349. 两个数组的交集 给定两个数组 nums1 和 nums2 ，返回 它们的交集 。输出结果中的每个元素一定是 唯一 的。我们可以 不考虑输出结果的顺序 。 示例 1： 1 2 输入：num</description></item><item><title>383. 赎金信</title><link>https://trouvaille0198.github.io/Notes/posts/%E5%88%B7%E9%A2%98/string/383.-%E8%B5%8E%E9%87%91%E4%BF%A1/</link><pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/%E5%88%B7%E9%A2%98/string/383.-%E8%B5%8E%E9%87%91%E4%BF%A1/</guid><description>383. 赎金信 给你两个字符串：ransomNote 和 magazine ，判断 ransomNote 能不能由 magazine 里面的字符构成。 如果可以，返回 true ；否则返回 false 。 magazine 中的每个字符只能在 ransomNote 中使用</description></item><item><title>bufio</title><link>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/io/bufio/</link><pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/io/bufio/</guid><description>bufio Go 语言在 io 操作中，还提供了一个 bufio 的包，使用这个包可以大幅提高文件读写的效率。 参考：https://www.cnblogs.com/rick</description></item><item><title>142. 环形链表 II</title><link>https://trouvaille0198.github.io/Notes/posts/%E5%88%B7%E9%A2%98/link-list/142.-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8-ii/</link><pubDate>Wed, 09 Mar 2022 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/%E5%88%B7%E9%A2%98/link-list/142.-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8-ii/</guid><description>142. 环形链表 II 给定一个链表的头节点 head ，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。 示例 1： 1 2 3 输入：head = [3,2,0,-4], pos = 1 输出：</description></item><item><title>19. 删除链表的倒数第 N 个结点</title><link>https://trouvaille0198.github.io/Notes/posts/%E5%88%B7%E9%A2%98/link-list/19.-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%AC-n-%E4%B8%AA%E7%BB%93%E7%82%B9/</link><pubDate>Tue, 08 Mar 2022 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/%E5%88%B7%E9%A2%98/link-list/19.-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%AC-n-%E4%B8%AA%E7%BB%93%E7%82%B9/</guid><description>19. 删除链表的倒数第 N 个结点 快慢指针 伪头节点真香，删除头节点很方便 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 func removeNthFromEnd(head *ListNode, n int) *ListNode { if head.Next == nil { return nil } fakeHead := &amp;amp;ListNode{Next: head} pre, p,</description></item><item><title>206. 反转链表</title><link>https://trouvaille0198.github.io/Notes/posts/%E5%88%B7%E9%A2%98/link-list/206.-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</link><pubDate>Tue, 08 Mar 2022 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/%E5%88%B7%E9%A2%98/link-list/206.-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</guid><description>206. 反转链表 给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。 示例 1： 1 2 输入：head = [1,2,3,4,5] 输出：[5,4,3,2,1] 示例 2： 1 2 输入</description></item></channel></rss>