<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - 伤心肠粉的酱油碟子</title><link>https://trouvaille0198.github.io/Notes/posts/</link><description>所有文章 | 伤心肠粉的酱油碟子</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 06 Mar 2022 08:02:35 +0000</lastBuildDate><atom:link href="https://trouvaille0198.github.io/Notes/posts/" rel="self" type="application/rss+xml"/><item><title/><link>https://trouvaille0198.github.io/Notes/posts/courses/operating-system/os2/</link><pubDate>Sun, 06 Mar 2022 08:02:35 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/courses/operating-system/os2/</guid><description>判断题20分（F和T） 单选题20分 填空题20分 简答题20分 3道（描述概念） 8分：文件系统 7分：地址映射变换 5分：Linux 综合题（计算）3道</description></item><item><title/><link>https://trouvaille0198.github.io/Notes/posts/homework/algorithm/%E6%8A%A5%E5%91%8A%E4%B8%80/</link><pubDate>Sun, 06 Mar 2022 08:02:35 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/homework/algorithm/%E6%8A%A5%E5%91%8A%E4%B8%80/</guid><description>棋盘覆盖问题 实验分析 使用分治思想解题，比较合理。 将棋盘分为四块，为使得每个子棋盘都含有一个特殊方格，取一个 L 型骨牌覆盖在棋盘汇合之处，作为子</description></item><item><title/><link>https://trouvaille0198.github.io/Notes/posts/homework/algorithm/%E6%8A%A5%E5%91%8A%E4%B8%83/</link><pubDate>Sun, 06 Mar 2022 08:02:35 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/homework/algorithm/%E6%8A%A5%E5%91%8A%E4%B8%83/</guid><description>装载问题 问题分析 装载问题适合用回溯法来解。 对 n 个集装箱，共有 2^n^ 种装载方法，可以用一个完全二叉树来包含所有的情况。每一层代表一个集装箱，共 n 层</description></item><item><title/><link>https://trouvaille0198.github.io/Notes/posts/homework/algorithm/%E6%8A%A5%E5%91%8A%E4%B8%89/</link><pubDate>Sun, 06 Mar 2022 08:02:35 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/homework/algorithm/%E6%8A%A5%E5%91%8A%E4%B8%89/</guid><description>最长公共子序列 实验分析 概念 子序列：若给定序列 $X={x_1,x_2,…,x_m}$，则另一序列 $Z={z_1,z_2,…,z_k}$是 X 的子</description></item><item><title/><link>https://trouvaille0198.github.io/Notes/posts/homework/algorithm/%E6%8A%A5%E5%91%8A%E4%BA%8C/</link><pubDate>Sun, 06 Mar 2022 08:02:35 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/homework/algorithm/%E6%8A%A5%E5%91%8A%E4%BA%8C/</guid><description>矩阵连乘问题 实验分析 分析最优解的结构 记 $A[i:j]$ 为 A~i~A~i+!~…A~j~，记 $m[i][j]$ 是计算 A~i~A~i+!~…A~j~ 时的最少乘法次数，显然 $A</description></item><item><title/><link>https://trouvaille0198.github.io/Notes/posts/homework/algorithm/%E6%8A%A5%E5%91%8A%E4%BA%94/</link><pubDate>Sun, 06 Mar 2022 08:02:35 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/homework/algorithm/%E6%8A%A5%E5%91%8A%E4%BA%94/</guid><description>Dijkstra 算法 实验分析 按路径长度递增的次序来产生最短路径；先求路径最短的一条，然后参照它进行刷新，求出长度次短的一条，以此类推，被求出长度的顶点放入</description></item><item><title/><link>https://trouvaille0198.github.io/Notes/posts/homework/algorithm/%E6%8A%A5%E5%91%8A%E5%85%AD/</link><pubDate>Sun, 06 Mar 2022 08:02:35 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/homework/algorithm/%E6%8A%A5%E5%91%8A%E5%85%AD/</guid><description>跳马问题 问题分析 跳马问题用 BFS 来解特别合适 除去出界的情况，马走一次有八种选择，可以从起点出发，对存储在队列中的每一个点进行广度搜索，处理过的点</description></item><item><title/><link>https://trouvaille0198.github.io/Notes/posts/homework/algorithm/%E6%8A%A5%E5%91%8A%E5%9B%9B/</link><pubDate>Sun, 06 Mar 2022 08:02:35 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/homework/algorithm/%E6%8A%A5%E5%91%8A%E5%9B%9B/</guid><description>哈夫曼编码 实验分析 哈夫曼编码是一种前缀码，解码时没有歧义，相比于等长编码可以节省空间 计算字母频率作为权值，构造哈夫曼树 叶子结点具有哈夫曼编码</description></item><item><title/><link>https://trouvaille0198.github.io/Notes/posts/homework/database/ex2/</link><pubDate>Sun, 06 Mar 2022 08:02:35 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/homework/database/ex2/</guid><description>实验二 ​ 孙天野 19120198 对 school 数据库做如下查询： 验证在 1000 万个以上记录时在索引和不索引时的查询时间区别。 没有索引的情况： 建立索引的过程： 建立索引后： 用以</description></item><item><title/><link>https://trouvaille0198.github.io/Notes/posts/homework/database/ex3/</link><pubDate>Sun, 06 Mar 2022 08:02:35 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/homework/database/ex3/</guid><description>实验三 ​ 孙天野 19120198 查询每门课程中分数最高的学生学号和学生姓名。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 SELECTe.kh,s.xh,s.xmFROMsINNERJOINeONs.xh=e.xhWHERE(e.kh,e.zpcj)IN(SELECTe.kh,max(zpcj)FROMeGROUPBYe.kh) 查询年龄小于本学院平均年龄，所有课程总评成绩都</description></item></channel></rss>