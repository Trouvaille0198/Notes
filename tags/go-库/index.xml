<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Go 库 - 标签 - 伤心肠粉的酱油碟子</title><link>https://trouvaille0198.github.io/Notes/tags/go-%E5%BA%93/</link><description>Go 库 - 标签 - 伤心肠粉的酱油碟子</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 11 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://trouvaille0198.github.io/Notes/tags/go-%E5%BA%93/" rel="self" type="application/rss+xml"/><item><title>Go strings 标准库</title><link>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/%E6%96%87%E6%9C%AC/strings/</link><pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/%E6%96%87%E6%9C%AC/strings/</guid><description>strings 由于 string 类型可以看成是一种特殊的 slice 类型，因此获取长度可以用内置的函数 len；同时支持 切片 操作，因此，子串获取很容易。 这里说的字符，指得是 rune 类</description></item><item><title>Go cobra 库</title><link>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/cobra/</link><pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/cobra/</guid><description>cobra cobra既是一个用于创建强大现代 CLI 应用程序的库，也是一个生成应用程序和命令文件的程序。cobra 被用在很多 go 语言的项目中，比如 Kuber</description></item><item><title>Go log 标准库</title><link>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/log/</link><pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/log/</guid><description>log Go 语言内置的 log 包实现了简单的日志服务。 使用 Logger log 包定义了 Logger 类型，该类型提供了一些格式化输出的方法。 本包也提供了一个预定义的 “标准” logge</description></item><item><title>Go context 标准库</title><link>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/context/</link><pubDate>Mon, 07 Feb 2022 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/context/</guid><description>context 什么是 Context Context 也叫作“上下文”，是一个比较抽象的概念，一般理解为程序单元的一个运行状态、现场、快照。其中上下是指存在上下层的传递，上会把内容传</description></item><item><title>Go gopacket 库</title><link>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/%E7%BD%91%E7%BB%9C/gopacket/</link><pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/%E7%BD%91%E7%BB%9C/gopacket/</guid><description>gopacket 1 go get github.com/google/gopacket pcap 处理 查看版本 1 2 version := pcap.Version() fmt.Println(version) 测试（Win10 x64） Npcap version 1.00, based on libpcap version 1.9.1 网络接口 类型：pcap.Interface 1 2 3 4 5 6 7 8 9 10 11</description></item><item><title>Go flag 库</title><link>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/flag/</link><pubDate>Sat, 05 Feb 2022 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/flag/</guid><description>flag Go 语言内置的 flag 包实现了命令行参数的解析，flag 包使得开发命令行工具更为简单。 参数类型 flag 包支持的命令行参数类型有 bool、int、int6</description></item><item><title>Go fmt 标准库</title><link>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/io/fmt/</link><pubDate>Fri, 04 Feb 2022 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/io/fmt/</guid><description>fmt fmt 包实现了格式化 I/O 函数，类似于 C 的 printf 和 scanf；格式“占位符”衍生自 C，但比 C 更简单。 以下例子中用到的类型或变量定义： 1 2 3 4 5 6 type Website struct</description></item><item><title>Go net 标准库</title><link>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/%E7%BD%91%E7%BB%9C/net/</link><pubDate>Fri, 04 Feb 2022 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/%E7%BD%91%E7%BB%9C/net/</guid><description>net net 包 lookUp 地址信息查找 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 //InterfaceAddrs 返回该系统的网络接口的地址列表。 addr, _ := net.InterfaceAddrs() fmt.Println(addr) //Interfaces 返回该系统的网络接口列表 interfaces, _</description></item><item><title>Go ioutil 标准库</title><link>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/io/ioutil/</link><pubDate>Tue, 04 Jan 2022 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/io/ioutil/</guid><description>ioutil 虽然 io 包提供了不少类型、方法和函数，但有时候使用起来不是那么方便。比如读取一个文件中的所有内容。为此，标准库中提供了一些常用、方便的 IO 操作</description></item><item><title>Go os 标准库</title><link>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/os/</link><pubDate>Sat, 25 Dec 2021 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/os/</guid><description>os os 包提供了平台无关的操作系统功能接口。 尽管错误处理是 go 风格的，但设计是 Unix 风格的；所以，失败的调用会返回 error 而非错误码。通常 error 里会包含更多信息</description></item></channel></rss>