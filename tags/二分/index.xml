<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>二分 - 标签 - 伤心肠粉的酱油碟子</title><link>https://trouvaille0198.github.io/Notes/tags/%E4%BA%8C%E5%88%86/</link><description>二分 - 标签 - 伤心肠粉的酱油碟子</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 06 Mar 2022 08:02:35 +0000</lastBuildDate><atom:link href="https://trouvaille0198.github.io/Notes/tags/%E4%BA%8C%E5%88%86/" rel="self" type="application/rss+xml"/><item><title>367. 有效的完全平方数</title><link>https://trouvaille0198.github.io/Notes/posts/%E5%88%B7%E9%A2%98/array/367.-%E6%9C%89%E6%95%88%E7%9A%84%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/</link><pubDate>Sun, 06 Mar 2022 08:02:35 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/%E5%88%B7%E9%A2%98/array/367.-%E6%9C%89%E6%95%88%E7%9A%84%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/</guid><description>367. 有效的完全平方数 easy 给定一个 正整数 num ，编写一个函数，如果 num 是一个完全平方数，则返回 true ，否则返回 false 。 进阶：不要 使用任何内置的库函数，如 sqrt 。 示例</description></item><item><title>69. x 的平方根</title><link>https://trouvaille0198.github.io/Notes/posts/%E5%88%B7%E9%A2%98/array/69.-x-%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9-/</link><pubDate>Sun, 06 Mar 2022 08:02:35 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/%E5%88%B7%E9%A2%98/array/69.-x-%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9-/</guid><description><![CDATA[69. x 的 平方根 easy 二分法 不多 bb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 func mySqrt(x int) int { low, high := 0, x for low &lt;= high { mid := low + (high-low)&gt;&gt;1 if mid*mid &lt; x { if (mid+1)*(mid+1) &gt; x { // 找到最后一个小于]]></description></item><item><title>剑指 Offer 11. 旋转数组的最小数字</title><link>https://trouvaille0198.github.io/Notes/posts/%E5%88%B7%E9%A2%98/array/%E5%89%91%E6%8C%87-offer-11.-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/</link><pubDate>Sun, 06 Mar 2022 08:02:35 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/%E5%88%B7%E9%A2%98/array/%E5%89%91%E6%8C%87-offer-11.-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/</guid><description>剑指 Offer 11. 旋转数组的最小数字 easy 把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 给你一个可能存在重复元素值的数组 numbers ，它原来是一</description></item><item><title>剑指 Offer 53 - I. 在排序数组中查找数字 I</title><link>https://trouvaille0198.github.io/Notes/posts/%E5%88%B7%E9%A2%98/array/%E5%89%91%E6%8C%87-offer-53-i.-%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E6%95%B0%E5%AD%97-i/</link><pubDate>Sun, 06 Mar 2022 08:02:35 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/%E5%88%B7%E9%A2%98/array/%E5%89%91%E6%8C%87-offer-53-i.-%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E6%95%B0%E5%AD%97-i/</guid><description>剑指 Offer 53 - I. 在排序数组中查找数字 I easy 统计一个数字在排序数组中出现的次数。 示例 1: 1 2 输入: nums = [5,7,7,8,8,10], target = 8 输出: 2 示例 2: 1 2 输入: nums = [5,7,7,8,8,10], target = 6 输出</description></item><item><title>剑指 Offer 53 - II. 0～n-1中缺失的数字</title><link>https://trouvaille0198.github.io/Notes/posts/%E5%88%B7%E9%A2%98/array/%E5%89%91%E6%8C%87-offer-53-ii.-0n-1-%E4%B8%AD%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/</link><pubDate>Sun, 06 Mar 2022 08:02:35 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/%E5%88%B7%E9%A2%98/array/%E5%89%91%E6%8C%87-offer-53-ii.-0n-1-%E4%B8%AD%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/</guid><description>剑指 Offer 53 - II. 0～n-1 中缺失的数字 easy 一个长度为 n-1 的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围 0～n-1 之内。在范围 0～n-1 内</description></item></channel></rss>