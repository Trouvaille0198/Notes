<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>后端 - 标签 - 伤心肠粉的酱油碟子</title><link>https://trouvaille0198.github.io/Notes/tags/%E5%90%8E%E7%AB%AF/</link><description>后端 - 标签 - 伤心肠粉的酱油碟子</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 15 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://trouvaille0198.github.io/Notes/tags/%E5%90%8E%E7%AB%AF/" rel="self" type="application/rss+xml"/><item><title>Go Gin</title><link>https://trouvaille0198.github.io/Notes/posts/golang/webbackend/gin/</link><pubDate>Tue, 15 Feb 2022 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/webbackend/gin/</guid><description><![CDATA[gin Gin is a HTTP web framework written in Go (Golang). It features a Martini-like API, but with performance up to 40 times faster than Martini. 1 2 3 4 5 6 7 8 9 10 11 12 13 package main import &#34;github.com/gin-gonic/gin&#34; func main() { r := gin.Default() r.GET(&#34;/ping&#34;, func(c *gin.Context) { c.JSON(200, gin.H{ &#34;message&#34;: &#34;pong&#34;, }) }) r.Run() // listen and serve on 0.0.0.0:8080 } Quick Start Installation]]></description></item><item><title>Go GORM</title><link>https://trouvaille0198.github.io/Notes/posts/golang/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/gorm/</link><pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/gorm/</guid><description>gorm 官方文档：https://gorm.io/zh_CN/docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38</description></item><item><title>API 规范</title><link>https://trouvaille0198.github.io/Notes/posts/frontend/%E6%A1%86%E6%9E%B6/api-%E8%A7%84%E8%8C%83/</link><pubDate>Sat, 11 Dec 2021 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/frontend/%E6%A1%86%E6%9E%B6/api-%E8%A7%84%E8%8C%83/</guid><description>API 规范 Filtering 如果记录数量很多，服务器不可能都将它们返回给用户。API 应该 提供参数，过滤返回结果。下面是一些常见的参数。 ?limit=10：指定返</description></item><item><title>Django</title><link>https://trouvaille0198.github.io/Notes/posts/python/web-backend/django/</link><pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/python/web-backend/django/</guid><description>Django 认识 概念 URLs: 虽然可以通过单个功能来处理来自每个URL的请求，但是编写单独的视图函数来处理每个资源是更加可维护的。URL映射器用于根据请求UR</description></item><item><title>FastAPI</title><link>https://trouvaille0198.github.io/Notes/posts/python/web-backend/fastapi/</link><pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/python/web-backend/fastapi/</guid><description>FastAPI 认识 运行 1 uvicorn main:app --reload main：main.py 文件（一个 Python「模块」）。 app：在 main.py 文件中通过 app = FastAPI() 创建的对象。 --reload：让服务</description></item><item><title>Flask</title><link>https://trouvaille0198.github.io/Notes/posts/python/web-backend/flask/</link><pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/python/web-backend/flask/</guid><description><![CDATA[Flask 例子 初始化 1 2 3 4 5 6 7 8 9 10 from flask import Flask app = Flask(__name__) @app.route(&#39;/&#39;) def hello_world(): return &#39;Hello, World!&#39; app.run(debug=True) # 自动以调试方式运行 若想要在命令行中控制运行 1 2 $ set FLASK_APP=hello.py $ flask run 若想要其他机器访问 1]]></description></item><item><title>SQLAlchemy</title><link>https://trouvaille0198.github.io/Notes/posts/python/web-backend/sqlalchemy/</link><pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/python/web-backend/sqlalchemy/</guid><description>SQLAlchemy 认识 ORM：Object Relational Mapping（对象关系映射）将数据库中的表与类构建映射 简洁易读：将数据表抽象为对象（数据模型），更直观易读 可移</description></item></channel></rss>