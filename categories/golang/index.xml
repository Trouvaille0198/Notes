<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Golang - 分类 - 伤心肠粉的酱油碟子</title><link>https://trouvaille0198.github.io/Notes/categories/golang/</link><description>Golang - 分类 - 伤心肠粉的酱油碟子</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 06 Mar 2022 08:02:35 +0000</lastBuildDate><atom:link href="https://trouvaille0198.github.io/Notes/categories/golang/" rel="self" type="application/rss+xml"/><item><title>channel 用例大全</title><link>https://trouvaille0198.github.io/Notes/posts/golang/%E8%BF%9B%E9%98%B6/channel-%E7%94%A8%E4%BE%8B%E5%A4%A7%E5%85%A8/</link><pubDate>Sun, 06 Mar 2022 08:02:35 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/%E8%BF%9B%E9%98%B6/channel-%E7%94%A8%E4%BE%8B%E5%A4%A7%E5%85%A8/</guid><description>channel 用例大全 本文摘自 https://gfw.go101.org/article/channel-use-cases.html 本文将展示很多通道用例。 希望这篇文章能够说服你接收下面的观点： 使用通道进行异步和并发编程是简单和惬意的； 通道同步技术比被</description></item><item><title>Go bytes 标准库</title><link>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/%E6%96%87%E6%9C%AC/bytes/</link><pubDate>Sun, 06 Mar 2022 08:02:35 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/%E6%96%87%E6%9C%AC/bytes/</guid><description>bytes 该包定义了一些操作 byte slice 的便利操作。 因为字符串可以表示为 []byte，所以 bytes 包定义的函数、方法等和 strings 包很类似 为了方便，会称呼 []byte 为 字节数组 是否</description></item><item><title>Go cobra 库</title><link>https://trouvaille0198.github.io/Notes/posts/golang/%E5%B8%B8%E7%94%A8%E5%BA%93/cobra/</link><pubDate>Sun, 06 Mar 2022 08:02:35 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/%E5%B8%B8%E7%94%A8%E5%BA%93/cobra/</guid><description>cobra cobra既是一个用于创建强大现代 CLI 应用程序的库，也是一个生成应用程序和命令文件的程序。cobra 被用在很多 go 语言的项目中，比如 Kuber</description></item><item><title>Go container 标准库</title><link>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/container/</link><pubDate>Sun, 06 Mar 2022 08:02:35 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/container/</guid><description>container 该包实现了三个复杂的数据结构：堆，链表，环。 这个包就意味着你使用这三个数据结构的时候不需要再费心从头开始写算法了。 堆 这里的堆使用的数据结构</description></item><item><title>Go context 标准库</title><link>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/context/</link><pubDate>Sun, 06 Mar 2022 08:02:35 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/context/</guid><description>context 什么是 Context Context 也叫作“上下文”，是一个比较抽象的概念，一般理解为程序单元的一个运行状态、现场、快照。其中上下是指存在上下层的传递，上会把内容传</description></item><item><title>Go filepath 标准库</title><link>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/filepath/</link><pubDate>Sun, 06 Mar 2022 08:02:35 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/filepath/</guid><description>filepath path/filepath 包涉及到路径操作时，路径分隔符使用 os.PathSeparator。 不同系统，路径表示方式有所不同，比如 Unix 和 Windows 差别很大。本包能够处理所有</description></item><item><title>Go flag 库</title><link>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/flag/</link><pubDate>Sun, 06 Mar 2022 08:02:35 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/flag/</guid><description>flag Go 语言内置的 flag 包实现了命令行参数的解析，flag 包使得开发命令行工具更为简单。 参数类型 flag 包支持的命令行参数类型有 bool、int、int6</description></item><item><title>Go fmt 标准库</title><link>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/io/fmt/</link><pubDate>Sun, 06 Mar 2022 08:02:35 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/io/fmt/</guid><description>fmt fmt 包实现了格式化 I/O 函数，类似于 C 的 printf 和 scanf；格式“占位符”衍生自 C，但比 C 更简单。 以下例子中用到的类型或变量定义： 1 2 3 4 5 6 type Website struct</description></item><item><title>Go Gin</title><link>https://trouvaille0198.github.io/Notes/posts/golang/webbackend/gin/</link><pubDate>Sun, 06 Mar 2022 08:02:35 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/webbackend/gin/</guid><description><![CDATA[gin Gin is a HTTP web framework written in Go (Golang). It features a Martini-like API, but with performance up to 40 times faster than Martini. 1 2 3 4 5 6 7 8 9 10 11 12 13 package main import &#34;github.com/gin-gonic/gin&#34; func main() { r := gin.Default() r.GET(&#34;/ping&#34;, func(c *gin.Context) { c.JSON(200, gin.H{ &#34;message&#34;: &#34;pong&#34;, }) }) r.Run() // listen and serve on 0.0.0.0:8080 } Quick Start Installation]]></description></item><item><title>Go gopacket 库</title><link>https://trouvaille0198.github.io/Notes/posts/golang/%E5%B8%B8%E7%94%A8%E5%BA%93/gopacket/</link><pubDate>Sun, 06 Mar 2022 08:02:35 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/%E5%B8%B8%E7%94%A8%E5%BA%93/gopacket/</guid><description>gopacket 1 go get github.com/google/gopacket pcap 处理 查看版本 1 2 version := pcap.Version() fmt.Println(version) 测试（Win10 x64） Npcap version 1.00, based on libpcap version 1.9.1 网络接口 类型：pcap.Interface 1 2 3 4 5 6 7 8 9 10 11</description></item></channel></rss>