<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Golang - 分类 - 伤心肠粉的酱油碟子</title><link>https://trouvaille0198.github.io/Notes/categories/golang/</link><description>Golang - 分类 - 伤心肠粉的酱油碟子</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 06 Mar 2022 15:09:36 +0800</lastBuildDate><atom:link href="https://trouvaille0198.github.io/Notes/categories/golang/" rel="self" type="application/rss+xml"/><item><title>Go 基础语法</title><link>https://trouvaille0198.github.io/Notes/posts/golang/basicgrammar/</link><pubDate>Sun, 06 Mar 2022 15:09:36 +0800</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/basicgrammar/</guid><description>Golang 安装 下载地址：https://go.dev/dl/ 使用 Linux 1 2 3 4 5 6 $ wget https://studygolang.com/dl/golang/go1.13.6.linux-amd64.tar.gz $ tar -zxvf go1.13.6.linux-amd64.tar.gz $ sudo mv go /usr/local/ $ go version go version go1.13.6 linux/amd64 从 Go 1.11 版本开始，Go 提供了 Go Modules 的</description></item><item><title>channel 用例大全</title><link>https://trouvaille0198.github.io/Notes/posts/golang/%E8%BF%9B%E9%98%B6/channel-%E7%94%A8%E4%BE%8B%E5%A4%A7%E5%85%A8/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/%E8%BF%9B%E9%98%B6/channel-%E7%94%A8%E4%BE%8B%E5%A4%A7%E5%85%A8/</guid><description>channel 用例大全 本文摘自 https://gfw.go101.org/article/channel-use-cases.html 本文将展示很多通道用例。 希望这篇文章能够说服你接收下面的观点： 使用通道进行异步和并发编程是简单和惬意的； 通道同步技术比被</description></item><item><title>Go test 教程</title><link>https://trouvaille0198.github.io/Notes/posts/golang/go-test/</link><pubDate>Thu, 03 Mar 2022 23:10:06 +0800</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/go-test/</guid><description>go test Go语言提供了go test 命令行工具，使用该工具可以很方便的进行测试。 不仅 Go 语言源码中大量使用 go test，在各种开源框架中的应用也极为普遍。 目</description></item><item><title>Go runtime/pprof库</title><link>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/pprof/</link><pubDate>Thu, 03 Mar 2022 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/pprof/</guid><description>runtime/pprof benchmark(基准测试) 可以度量某个函数或方法的性能，也就是说，如果我们知道性能的瓶颈点在哪里，benchmark 是一个非常好的方式</description></item><item><title>Go 进阶</title><link>https://trouvaille0198.github.io/Notes/posts/golang/%E8%BF%9B%E9%98%B6/go-%E8%BF%9B%E9%98%B6/</link><pubDate>Thu, 03 Mar 2022 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/%E8%BF%9B%E9%98%B6/go-%E8%BF%9B%E9%98%B6/</guid><description>Go 进阶 内存对齐 引入 1 2 3 4 5 6 7 type Part1 struct { a bool b int32 c int8 d int64 e byte } 在开始之前，希望你计算一下 Part1 共占用的大小是多少呢？ 1 2 3 4 5 6 7 8 func main() { fmt.Printf(&amp;#34;bool size: %d\n&amp;#34;,</description></item><item><title>Go 高性能编程</title><link>https://trouvaille0198.github.io/Notes/posts/golang/%E8%BF%9B%E9%98%B6/go-%E9%AB%98%E6%80%A7%E8%83%BD%E7%BC%96%E7%A8%8B/</link><pubDate>Thu, 03 Mar 2022 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/%E8%BF%9B%E9%98%B6/go-%E9%AB%98%E6%80%A7%E8%83%BD%E7%BC%96%E7%A8%8B/</guid><description>Go 高性能编程 常用数据结构 字符串高效拼接 在 Go 语言中，字符串 (string) 是不可变的，拼接字符串事实上是创建了一个新的字符串对象。 如果代码中存在大量的字符串</description></item><item><title>Go Gin</title><link>https://trouvaille0198.github.io/Notes/posts/golang/webbackend/gin/</link><pubDate>Fri, 25 Feb 2022 21:46:44 +0800</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/webbackend/gin/</guid><description><![CDATA[gin Gin is a HTTP web framework written in Go (Golang). It features a Martini-like API, but with performance up to 40 times faster than Martini. 1 2 3 4 5 6 7 8 9 10 11 12 13 package main import &#34;github.com/gin-gonic/gin&#34; func main() { r := gin.Default() r.GET(&#34;/ping&#34;, func(c *gin.Context) { c.JSON(200, gin.H{ &#34;message&#34;: &#34;pong&#34;, }) }) r.Run() // listen and serve on 0.0.0.0:8080 } Quick Start Installation]]></description></item><item><title>Go 专家编程</title><link>https://trouvaille0198.github.io/Notes/posts/golang/%E8%BF%9B%E9%98%B6/go-%E4%B8%93%E5%AE%B6%E7%BC%96%E7%A8%8B/</link><pubDate>Wed, 23 Feb 2022 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/%E8%BF%9B%E9%98%B6/go-%E4%B8%93%E5%AE%B6%E7%BC%96%E7%A8%8B/</guid><description>进阶 编译原理 Token -&amp;gt; 语法树 AST -&amp;gt; 中间码 -&amp;gt; 机器码 词法与语法分析 词法分析的作用就是解析源代码文件，它将文件中的字符串序列转换成 Token 序列，方便后面的处理和</description></item><item><title>Go GORM</title><link>https://trouvaille0198.github.io/Notes/posts/golang/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/gorm/</link><pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/gorm/</guid><description>gorm 官方文档：https://gorm.io/zh_CN/docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38</description></item><item><title>Go strings 标准库</title><link>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/%E6%96%87%E6%9C%AC/strings/</link><pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate><author>作者</author><guid>https://trouvaille0198.github.io/Notes/posts/golang/%E6%A0%87%E5%87%86%E5%BA%93/%E6%96%87%E6%9C%AC/strings/</guid><description>strings 由于 string 类型可以看成是一种特殊的 slice 类型，因此获取长度可以用内置的函数 len；同时支持 切片 操作，因此，子串获取很容易。 这里说的字符，指得是 rune 类</description></item></channel></rss>